name: Build and Run Tests
on:
  workflow_call:
    inputs:
      chart_dir:
        required: true
        type: string
      chart_tag:
        required: false
        type: string
      chart_overwrite:
        required: true
        type: boolean
      is_lib_chart:
        required: false
        type: boolean
        default: false
      # chart_name Deprecated
      chart_name:
        required: false
        type: string
      pre_build_script:
        required: false
        type: string
      git_branch:
        required: false
        type: string
        default: ''   
      build-target:
        required: false
        type: string
      docker-arch:
        required: true
        type: string
      docker-build-args:
        required: false
        type: string
      pre-build-script:
        required: false
        type: string
      dockerfile-path:
        required: false
        type: string
        default: "./Dockerfile"
      custom-image-name:
        required: false
        type: string
    secrets:
      docker-build-secrets:
        required: false
      DOCKER_HUB_TOKEN:
        required: true
      PAT_TOKEN:
        required: true      
    outputs:
      docker-tag:
        description: Docker Tag Value
        value: ${{ jobs.build-image.outputs.docker-tag }}
      docker-repo:
        description: Docker Registry and Repo without Tag
        value: ${{ jobs.build-image.outputs.docker-repo }}
  workflow_dispatch:
    push:
      tags:
        - "v*.*.*"
      branches:
        - main
    pull_request:
      types:
        - opened
        - synchronize      

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-gpt-chart-version:
    runs-on: ubuntu-latest
    outputs:
      chart-version: ${{ steps.extract-version.outputs.chart-version }}
    env:
      REGISTRY: ghcr.io
      DOCKER_HUB_USER: owolabialiu
      HELM_TEMPLATE: template.yaml
      CHART_DIR: './.github/workflows/charts/gpt-search'
      CHART_OVERWRITE: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_branch }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Run Pre-Build User-defined script
        run: bash -c '${{ inputs.pre_build_script }}'

      - name: Generate Docs
        continue-on-error: true
        uses: docker://jnorwood/helm-docs:v1.11.0
        with:
          chart_dir: ${{ env.CHART_DIR }}
          chart_overwrite: ${{ env.CHART_OVERWRITE }}
          entrypoint: helm-docs
          args: -g $(basename ${{ env.CHART_DIR }})
      - name: Install Dependencies
        run: helm dep build ${{ env.CHART_DIR }} --skip-refresh
      - name: Helm Lint
        run: helm lint ${{ env.CHART_DIR }}
      - name: Generate template.yaml
        if: ${{ !inputs.is_lib_chart }}
        run: helm template ${{ env.CHART_DIR }} > ${{ env.CHART_DIR }}/$HELM_TEMPLATE && cat ${{ env.CHART_DIR }}/$HELM_TEMPLATE
      - name: KubeVal Kubernetes Objects
        if: ${{ !inputs.is_lib_chart }}
        run: >
          docker run --rm -v $(pwd)/${{ env.CHART_DIR }}:/data
          cytopia/kubeval
          $HELM_TEMPLATE
          --output=stdout
          --strict
          --ignore-missing-schemas
      - run: rm -f $HELM_TEMPLATE
        if: ${{ !inputs.is_lib_chart }}
      - name: Get Chart Name from Chart.yaml
        run: echo "CHART_NAME=$(yq eval .name ${{ env.CHART_DIR }}/Chart.yaml)" >> $GITHUB_ENV
      - name: Get Chart Tag/version from Chart.yaml if not inputted
        if: ${{ inputs.chart_tag == '' }}
        run: echo "CHART_TAG=$(yq eval .version ${{ env.CHART_DIR }}/Chart.yaml)" >> $GITHUB_ENV
      - name: Chart Registry Overwrite Protection
        if: ${{ inputs.chart_overwrite == false }}
        run: '! $(helm pull oci://$REGISTRY/chart/$CHART_NAME --version $CHART_TAG)'
      - name: Release Helm Chart
        uses: appany/helm-oci-chart-releaser@v0.4.0
        with:
          name: ${{ env.CHART_NAME }}
          repository: owolabi16/charts
          tag: ${{ env.CHART_TAG }}
          path: ${{ env.CHART_DIR }}
          registry: ghcr.io
          registry_username: Owolabi16
          registry_password: ${{ secrets.PAT_TOKEN }}
        env:
          HELM_EXPERIMENTAL_OCI: 1

  get-agent-flows-chart-version:
    runs-on: ubuntu-latest
    outputs:
      chart-version: ${{ steps.extract-version.outputs.chart-version }}
    env:
      REGISTRY: ghcr.io
      DOCKER_HUB_USER: owolabialiu
      HELM_TEMPLATE: template.yaml
      CHART_DIR: './.github/workflows/charts/gpt-search'
      CHART_OVERWRITE: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_branch }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Run Pre-Build User-defined script
        run: bash -c '${{ inputs.pre_build_script }}'

      - name: Generate Docs
        continue-on-error: true
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        uses: docker://jnorwood/helm-docs:v1.11.0
        with:
          chart_dir: ${{ env.CHART_DIR }}
          chart_overwrite: ${{ env.CHART_OVERWRITE }}
          entrypoint: helm-docs
          args: -g $(basename ${{ env.CHART_DIR }})
      - name: Install Dependencies
        run: helm dep build ${{ env.CHART_DIR }} --skip-refresh
      - name: Helm Lint
        run: helm lint ${{ env.CHART_DIR }}
      - name: Generate template.yaml
        if: ${{ !inputs.is_lib_chart }}
        run: helm template ${{ env.CHART_DIR }} > ${{ env.CHART_DIR }}/$HELM_TEMPLATE && cat ${{ env.CHART_DIR }}/$HELM_TEMPLATE
      - name: KubeVal Kubernetes Objects
        if: ${{ !inputs.is_lib_chart }}
        run: >
          docker run --rm -v $(pwd)/${{ env.CHART_DIR }}:/data
          cytopia/kubeval
          $HELM_TEMPLATE
          --output=stdout
          --strict
          --ignore-missing-schemas
      - run: rm -f $HELM_TEMPLATE
        if: ${{ !inputs.is_lib_chart }}
      - name: Get Chart Name from Chart.yaml
        run: echo "CHART_NAME=$(yq eval .name ${{ env.CHART_DIR }}/Chart.yaml)" >> $GITHUB_ENV
      - name: Get Chart Tag/version from Chart.yaml if not inputted
        if: ${{ inputs.chart_tag == '' }}
        run: echo "CHART_TAG=$(yq eval .version ${{ env.CHART_DIR }}/Chart.yaml)" >> $GITHUB_ENV
      - name: Chart Registry Overwrite Protection
        if: ${{ inputs.chart_overwrite == false }}
        run: '! $(helm pull oci://$REGISTRY/chart/$CHART_NAME --version $CHART_TAG)'
      - name: Release Helm Chart
        uses: appany/helm-oci-chart-releaser@v0.4.0
        with:
          name: ${{ env.CHART_NAME }}
          repository: owolabi16/charts
          tag: ${{ env.CHART_TAG }}
          path: ${{ env.CHART_DIR }}
          registry: ghcr.io
          registry_username: Owolabi16
          registry_password: ${{ secrets.PAT_TOKEN }}
        env:
          HELM_EXPERIMENTAL_OCI: 1          

  build-gpt-image:
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.meta.outputs.version }}
      docker-repo: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: owolabialiu
          # username: aliuowolabi
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          # password: ${{ secrets.DOCKER_HUB_TOKEN2 }}
      
      - name: Set Docker Repository Variable
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set Docker Repository Output
        id: docker-repo
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT

      
      - name: Set Repository Owner
        run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}   
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.custom-image-name != '' && format('{0}/{1}', env.DOCKER_HUB_USER, inputs.custom-image-name) || env.DOCKER_REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=sha
            type=raw,value=${{inputs.build-target}}
           
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: ${{ inputs.docker-build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.docker-arch }}
          pull: true
          no-cache: false
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
          target: ${{ inputs.build-target }}
  
  build-agent-flows-image:
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.meta.outputs.version }}
      docker-repo: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: owolabialiu
          # username: aliuowolabi
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          # password: ${{ secrets.DOCKER_HUB_TOKEN2 }}
      
      - name: Set Docker Repository Variable
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set Docker Repository Output
        id: docker-repo
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT

      
      - name: Set Repository Owner
        run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}   
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.custom-image-name != '' && format('{0}/{1}', env.DOCKER_HUB_USER, inputs.custom-image-name) || env.DOCKER_REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=sha
            type=raw,value=${{inputs.build-target}}
           
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: ${{ inputs.docker-build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.docker-arch }}
          pull: true
          no-cache: false
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
          target: ${{ inputs.build-target }}
      
  build-migrate-vector-image:
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.meta.outputs.version }}
      docker-repo: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: owolabialiu
          # username: aliuowolabi
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          # password: ${{ secrets.DOCKER_HUB_TOKEN2 }}
      
      - name: Set Docker Repository Variable
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set Docker Repository Output
        id: docker-repo
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT

      
      - name: Set Repository Owner
        run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}   
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.custom-image-name != '' && format('{0}/{1}', env.DOCKER_HUB_USER, inputs.custom-image-name) || env.DOCKER_REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=sha
            type=raw,value=${{inputs.build-target}}
           
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: ${{ inputs.docker-build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.docker-arch }}
          pull: true
          no-cache: false
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
          target: ${{ inputs.build-target }}   
      
  build-migrate-agent-image:
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.meta.outputs.version }}
      docker-repo: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: owolabialiu
          # username: aliuowolabi
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          # password: ${{ secrets.DOCKER_HUB_TOKEN2 }}
      
      - name: Set Docker Repository Variable
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set Docker Repository Output
        id: docker-repo
        run: echo "DOCKER_REPOSITORY=owolabialiu/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
        # run: echo "DOCKER_REPOSITORY=aliuowolabi/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT

      
      - name: Set Repository Owner
        run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}   
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.custom-image-name != '' && format('{0}/{1}', env.DOCKER_HUB_USER, inputs.custom-image-name) || env.DOCKER_REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
            type=sha
            type=raw,value=${{inputs.build-target}}
           
      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: ${{ inputs.docker-build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.docker-arch }}
          pull: true
          no-cache: false
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
          target: ${{ inputs.build-target }} 

  docker-tests:
    name: Run Tests using Docker Image
    runs-on: ubuntu-latest
    needs: build-gpt-image
    timeout-minutes: 5
    env:
      DOCKER_REPO: ${{ needs.build-gpt-image.outputs.docker-repo }}
      DOCKER_TAG: ${{ needs.build-gpt-image.outputs.docker-tag }}
      DOCKER_TEST_IMAGE_TAG: gpt-search-test
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: registry.hub.docker.com
          # username: owolabialiu
          username: aliuowolabi
          # password: ${{ secrets.DOCKER_HUB_TOKEN }}
          password: ${{ secrets.DOCKER_HUB_TOKEN2 }}
      
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Pull Docker image
        run: docker pull --platform linux/arm64 $DOCKER_REPO:$DOCKER_TAG
      
      - name: Build Test Image
        run: >
          docker build
          --build-arg IMAGE=$DOCKER_REPO:$DOCKER_TAG
          -f Dockerfile
          -t $DOCKER_TEST_IMAGE_TAG .

      - name: Debug Docker Container
        run: |
          docker run $DOCKER_TEST_IMAGE_TAG find / -name "test_core.py" 2>/dev/null          
      
      - name: Execute Pytest
        run: |
          set -o pipefail
          docker run -v /tmp:/tmp -e PYTHONPATH=/app $DOCKER_TEST_IMAGE_TAG pytest ./gpt_search/test/ \
            --cov-report=xml:/tmp/coverage.xml \
            --cov-report=term \
            --junitxml=/tmp/pytest.xml \
            --cov=gpt_search | tee /tmp/pytest-coverage.txt
      
      - name: Pytest coverage comment
        if: always()
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: /tmp/coverage.xml
          junitxml-path: /tmp/pytest.xml
          title: Coverage Report
          badge-title: Coverage
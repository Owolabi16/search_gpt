name: Build Image and Push to GHCR..
on:
  workflow_call:
    inputs:
      build-target:
        required: false
        type: string
      docker-arch:
        required: true
        type: string
      docker-build-args:
        required: false
        type: string
      pre-build-script:
        required: false
        type: string
      dockerfile-path:
        required: false
        type: string
        default: "./Dockerfile"
      custom-image-name:
        required: false
        type: string
    secrets:
      docker-build-secrets:
        required: false
      DOCKER_HUB_TOKEN:
        required: false
    outputs:
      docker-tag:
        description: Docker Tag Value
        value: ${{ jobs.build-image.outputs.docker-tag }}
      docker-repo:
        description: Docker Registry and Repo without Tag
        value: ${{ jobs.build-image.outputs.docker-repo }}

env:
  REGISTRY: registry.hub.docker.com
  DOCKER_HUB_USER: owolabialiu

jobs:
  build-image:
    name: Build Image With Dockerfile Target '${{ inputs.build-target }}'
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.meta.outputs.version }}
      docker-repo: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: owolabialiu
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Github Repo Var to lower
        run: echo "DOCKER_REPOSITORY=$( echo ${{ env.REGISTRY }}/${{ github.repository }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      - name: Github Repo Var Output
        id: docker-repo
        run: echo "DOCKER_REPOSITORY=$( echo ${{ env.REGISTRY }}/${{ github.repository }} | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
      - name: Github Repo Owner to Lower
        run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Context for Buildx
        run: docker context create builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: builder
          driver-opts: |
            image=moby/buildkit:v0.10.6
      - name: Test PAT Token
        run: |
          echo "Testing PAT token permissions..."
          echo ${{ secrets.TOKEN }} | cut -c1-4 # Show first 4 chars only for safety
          curl -I -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/user            
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # password: ${{ secrets.PAT_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.custom-image-name != '' && format('{0}/{1}/{2}', env.REGISTRY, github.repository_owner, inputs.custom-image-name)  || env.DOCKER_REPOSITORY }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr,suffix=${{ inputs.build-target != '' && format( '-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format( '-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format( '-{0}', inputs.build-target) || ''}}
            type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format( '-{0}', inputs.build-target) || ''}}
            type=sha
            type=raw,value=${{inputs.build-target}}
      - name: Run Pre-Build User-defined script
        run: bash -c '${{ inputs.pre-build-script }}'
      - name: Git checkout, Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: ${{ inputs.docker-build-args }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile-path }}
          platforms: ${{ inputs.docker-arch }}
          pull: true
          no-cache: false
          # Use GHCR for cache
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
          target: ${{ inputs.build-target }}
  scan-image:
    name: Scan Docker Image for Critical Vulnerabilities
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: owolabialiu
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout Repo for .grype.yaml
        uses: actions/checkout@v3
      - name: Security Scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ needs.build-image.outputs.docker-repo }}:${{ needs.build-image.outputs.docker-tag }}
          fail-build: true
          severity-cutoff: critical
          output-format: table
          only-fixed: true
